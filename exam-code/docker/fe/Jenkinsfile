
pipeline {
   agent { label 'docker'}

    environment {
            DOCKERHUB_CREDENTIALS = credentials('docker-hub-creds')
            DOCKER_REGISTRY = 'meitar55'
            REPO_NAME = 'fe-exam'  // Change to 'be-exam' for backend pipeline
            IMAGE_TAG = "${env.BUILD_NUMBER}"
        }
   stages {
       stage("Clone Repository") {
           steps {
               git branch: 'workshop/argo-jenkins-exam', url: 'https://github.com/NanoShark/devopshift-welcome.git'
           }
       }
       stage("Lint & Security Scan"){
            parallel {
                stage("Flake8 Linting"){
                    steps{
                        script{
                          sh '''
                           if ! command -v flake8 &> /dev/null; then
                            echo "Installing flake8..."
                            pip install flake8
                            fi
                            flake8 . || true
                          '''  
                        }
                    }
                }
                stage("Bandit Security Scan"){
                    steps{
                       script{
                          sh '''
                            if ! command -v bandit &> /dev/null; then
                            echo "Installing bandit..."
                            pip install bandit
                            fi  
                            bandit -r . || true
                          '''  
                        } 
                    }
                }
            }
       }

       stage('Install Dependencies'){
            steps{
                sh "pip install -r exam-code/docker/fe/requirements.txt"
            }
       } 
       stage('Build Docker Image'){
           
                steps{
                    script{
                    sh '''
                    docker build -t ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} -f exam-code/docker/fe/Dockerfile exam-code/docker/fe
                    docker tag ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${REPO_NAME}:latest
                    '''
                    }
                }
        }

        stage('Run Tests in Container'){
            steps{
                    sh "docker run --rm ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} pytest /app/tests/"
            }
        }
        stage('Integration Test with Docker Compose'){
            steps{
                // script{
                //     sh '''
                //     echo ----------> Docker-Compose
                //     curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-uname -s-uname -m" -o /usr/local/bin/docker-compose
                //     docker-compose -f exam-code/docker/docker-compose.yaml down || true
                //     sh 'docker ps | grep -q 5002 && echo "Port 5002 is mapped and the container is running." || exit 1'
                //     docker-compose up -d
                //     sleep 10  # Allow services to start
                //      curl -f http://localhost:5004 || exit 1  # Adjust for backend if needed
                //     docker-compose down
                //     '''
                // }
            }
        }
        stage('Push to Docker Hub'){
            steps{
                script{
                    sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    
                    '''
                    // docker push meitar55/fe-exam:$BUILD_NUMBER
                    // docker push meitar55/fe-exam:latest
                }
            }
        }
   }
}